---
import IngredientSelector from "@/components/IngredientSelector";
import ProfileLayout from "@/layouts/ProfileLayout.astro";
import { supabase } from "@/lib/supabase";
import { CreateDishSchema, type CreateDish, type Dish } from "@/schema/dish";
import type { Ingredient } from "@/schema/ingredient";
import { formatError, type FormErrors } from "@/util/format-error";
import { z } from "zod";

let formErrors: FormErrors<CreateDish> | undefined;

const dishId = z.coerce
    .number({
        required_error: "Id de platillo es requerido",
        invalid_type_error: "Id de platillo debe ser n√∫mero",
    })
    .positive({
        message: "Id de platillo debe ser mayor a 0",
    })
    .safeParse(Astro.params.id);

let dish: Dish | null = null;
let ingredients: Ingredient[] = [];

if (dishId.success) {
    if (Astro.request.method === "POST") {
        const formData = await Astro.request.formData();
        const parsedData = CreateDishSchema.safeParse({
            name: formData.get("name"),
            ingredients: formData.getAll("ingredients"),
            price: formData.get("price"),
            quantity: formData.get("quantity"),
        });

        if (!parsedData.success) {
            formErrors = formatError(parsedData.error);
        } else {
            const { name, ingredients, price, quantity } = parsedData.data;

            try {
                const dishQuery = supabase
                    .from("Platillo")
                    .update(
                        {
                            nu_precio: price,
                            nu_cantidad: quantity,
                            txt_nombre: name,
                        },
                    )
                    .eq("id_platillo", dishId.data)
                    .select();

                const { data, error } = await dishQuery;

                if (error) {
                    Astro.locals.serverError = "Error al registrar platillo";
                } else {
                    /*const newDishData: QueryData<typeof dishQuery> = data;
                    const idNewDish = newDishData[0].id_platillo;

                    if (ingredients && ingredients.length > 0) {
                        const inserts = ingredients.map((ingredient) => ({
                            fk_id_ingrediente: ingredient,
                            fk_id_platillo: idNewDish,
                        }));

                        const ingredientsQuery = supabase
                            .from("Incluye")
                            .insert(inserts);

                        await ingredientsQuery;
                    }*/

                    return Astro.redirect("/manage-dishes");
                }
            } catch (error) {
                Astro.locals.serverError = "Error al registrar platillo";
            }
        }
    }

    const getDishQuery = supabase
        .from("Platillo")
        .select(`*`)
        .eq("id_platillo", dishId.data)
        .single();

    const { data, error } = await getDishQuery;

    if (!error) {
        dish = {
            id: data.id_platillo,
            name: data.txt_nombre,
            price: data.nu_precio,
            quantity: data.nu_cantidad,
        };

    } else {
        console.log(error)
        Astro.locals.serverError = "Platillo no existe";
    }
}
---

<ProfileLayout title="Registrar nuevo platillo">
    <h1 class="text-center text-5xl font-bold mt-8 mb-4">
        Registrar nuevo platillo
    </h1>
    <div class="container mx-auto">
        <form
            method="POST"
            class="flex flex-col gap-4"
        >
            <label class="form-control">
                <div class="label">
                    <span class="label-text">Nombre del platillo *</span>
                </div>
                <input type="text" class="input input-bordered" name="name" value={dish?.name || ""} />
                {
                    formErrors?.name && (
                        <div class="label">
                            <span class="label-text-alt text-red-500">
                                {formErrors.name}
                            </span>
                        </div>
                    )
                }
            </label>

           <!-- <IngredientSelector client:idle initialIngredients={ingredients}  /> -->

            <label class="form-control">
                <div class="label">
                    <span class="label-text"
                        >Cantidad de platillos que se pueden preparar*</span
                    >
                </div>
                <input
                    type="number"
                    class="input input-bordered"
                    placeholder="0"
                    name="quantity"
                    value={dish?.quantity || ""}
                />
                {
                    formErrors?.quantity && (
                        <div class="label">
                            <span class="label-text-alt text-red-500">
                                {formErrors.quantity}
                            </span>
                        </div>
                    )
                }
            </label>

            <label class="form-control">
                <div class="label">
                    <span class="label-text"
                        >Precio unitario del platillo *</span
                    >
                </div>

                <div class="input input-bordered flex items-center gap-2">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        class="icon icon-tabler icons-tabler-outline icon-tabler-currency-dollar"
                        ><path stroke="none" d="M0 0h24v24H0z" fill="none"
                        ></path><path
                            d="M16.7 8a3 3 0 0 0 -2.7 -2h-4a3 3 0 0 0 0 6h4a3 3 0 0 1 0 6h-4a3 3 0 0 1 -2.7 -2"
                        ></path><path d="M12 3v3m0 12v3"></path></svg
                    >
                    <input
                        type="number"
                        class="grow"
                        placeholder="0"
                        name="price"
                        value={dish?.price || ""}
                    />
                </div>

                {
                    formErrors?.price && (
                        <div class="label">
                            <span class="label-text-alt text-red-500">
                                {formErrors.price}
                            </span>
                        </div>
                    )
                }
            </label>
            <div class="flex justify-end gap-2">
                <a href="/manage-dishes" class="btn btn-ghost"> Cancelar </a>
                <button class="btn btn-primary" disabled={dish === null}> Aceptar </button>
            </div>
        </form>
    </div>
</ProfileLayout>
